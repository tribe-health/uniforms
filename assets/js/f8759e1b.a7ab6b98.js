(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{104:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return d})),n.d(t,"default",(function(){return o}));var a=n(3),r=n(9),i=(n(0),n(187)),b={id:"api-helpers",title:"Helpers"},l={unversionedId:"api-helpers",id:"api-helpers",isDocsHomePage:!1,title:"Helpers",description:"connectField",source:"@site/../docs/api-helpers.md",slug:"/api-helpers",permalink:"/docs/api-helpers",version:"current",sidebar:"docs",previous:{title:"Context data",permalink:"/docs/api-context-data"},next:{title:"AutoField algorithm",permalink:"/docs/uth-autofield-algorithm"}},d=[{value:"<code>connectField</code>",id:"connectfield",children:[{value:"Field kinds",id:"field-kinds",children:[]}]},{value:"<code>changedKeys</code>",id:"changedkeys",children:[]},{value:"<code>filterDOMProps</code>",id:"filterdomprops",children:[{value:"Custom props",id:"custom-props",children:[]}]},{value:"<code>joinName</code>",id:"joinname",children:[]},{value:"<code>randomIds</code>",id:"randomids",children:[]},{value:"<code>useField</code>",id:"usefield",children:[]}],c={toc:d};function o(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"connectfield"},Object(i.b)("inlineCode",{parentName:"h2"},"connectField")),Object(i.b)("p",null,"Provides form management related props. The ",Object(i.b)("inlineCode",{parentName:"p"},"connectField")," helper is a component wrapper, that provides various props related to the form management. It also adds the ",Object(i.b)("inlineCode",{parentName:"p"},"Field")," suffix to the name of the wrapped component."),Object(i.b)("p",null,"The table below lists all of the ",Object(i.b)("strong",{parentName:"p"},"guaranteed")," props that will be passed to the wrapped component:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"center"},"Name"),Object(i.b)("th",{parentName:"tr",align:"center"},"Type"),Object(i.b)("th",{parentName:"tr",align:"center"},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"changed")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:"center"},"Has field changed?")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"disabled")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:"center"},"Is field disabled?")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"error")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"object")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field scoped part of validation error.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"errorMessage")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field scoped validation error message.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"field")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"object")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field definition from schema.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"fields")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"arrayOf(string)")),Object(i.b)("td",{parentName:"tr",align:"center"},"Subfields names.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"fieldType")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"func")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field type.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"id")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field id - given or random.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"label")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field label.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"name")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field name.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"onChange")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"func(value, [name])")),Object(i.b)("td",{parentName:"tr",align:"center"},"Change field value.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"placeholder")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field placeholder.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"readOnly")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:"center"},"Is field read-only?")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"showInlineError")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:"center"},"Show inline error?")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"value")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"any")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field value.")))),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"connectField")," function accepts two arguments: the first one is a component and the second one is an ",Object(i.b)("inlineCode",{parentName:"p"},"options")," object."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"function Example(props) {\n  /* ... */\n}\n\nconst ExampleField = connectField(Example, options);\n")),Object(i.b)("p",null,"The table below lists all available options:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"center"},"Name"),Object(i.b)("th",{parentName:"tr",align:"center"},"Type"),Object(i.b)("th",{parentName:"tr",align:"center"},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"initialValue")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:"center"},"Initial value check. If ",Object(i.b)("inlineCode",{parentName:"td"},"true"),", then after the first render the default value is set as value if no value is provided (",Object(i.b)("inlineCode",{parentName:"td"},"undefined"),").")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"kind")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"'leaf'")," or ",Object(i.b)("inlineCode",{parentName:"td"},"'node'")),Object(i.b)("td",{parentName:"tr",align:"center"},"See ",Object(i.b)("a",{parentName:"td",href:"#field-kinds"},"Field kinds"),".")))),Object(i.b)("h3",{id:"field-kinds"},"Field kinds"),Object(i.b)("p",null,"Every field is either a ",Object(i.b)("em",{parentName:"p"},"leaf")," or ",Object(i.b)("em",{parentName:"p"},"node")," field. In the future, we could introduce new kinds to enable even more optimizations."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Leaf")," fields cannot have subfields. This allows us to perform some optimizations, like skipping the extra ",Object(i.b)("inlineCode",{parentName:"li"},"Provider")," from ",Object(i.b)("inlineCode",{parentName:"li"},"connectField"),", effectively reducing the overhead down to a single ",Object(i.b)("inlineCode",{parentName:"li"},"useField")," call.",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"It includes all input fields, like ",Object(i.b)("inlineCode",{parentName:"li"},"NumField"),", ",Object(i.b)("inlineCode",{parentName:"li"},"SelectField")," or ",Object(i.b)("inlineCode",{parentName:"li"},"TextField"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Node")," fields can have subfields. Fields of the ",Object(i.b)("em",{parentName:"li"},"leaf")," kind cannot have subfields.",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"It includes all combined and layout fields, like ",Object(i.b)("inlineCode",{parentName:"li"},"ListField")," or ",Object(i.b)("inlineCode",{parentName:"li"},"NestField"),".")))),Object(i.b)("p",null,"If you are not sure which one to use, do not use the ",Object(i.b)("inlineCode",{parentName:"p"},"kind")," option at all - it'll default to the safest option (right now it's ",Object(i.b)("inlineCode",{parentName:"p"},"node"),")."),Object(i.b)("h2",{id:"changedkeys"},Object(i.b)("inlineCode",{parentName:"h2"},"changedKeys")),Object(i.b)("p",null,"Returns an array of changed keys between ",Object(i.b)("inlineCode",{parentName:"p"},"valueA")," and ",Object(i.b)("inlineCode",{parentName:"p"},"valueB"),", where ",Object(i.b)("inlineCode",{parentName:"p"},"root")," is the root key. For examples see ",Object(i.b)("a",{parentName:"p",href:"https://github.com/vazco/uniforms/blob/master/packages/uniforms/__tests__/changedKeys.ts"},Object(i.b)("inlineCode",{parentName:"a"},"changedKeys")," tests"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import { changedKeys } from 'uniforms';\n\nchangedKeys('a', { b: 1, c: 2 }, { b: 1 }); // ['a', 'a.c']\n")),Object(i.b)("h2",{id:"filterdomprops"},Object(i.b)("inlineCode",{parentName:"h2"},"filterDOMProps")),Object(i.b)("p",null,"Removes all uniforms-related props, registered with ",Object(i.b)("inlineCode",{parentName:"p"},"filterDOMProps.register"),". Use it in all places where you'd like to pass all unrelated props down and ",Object(i.b)("inlineCode",{parentName:"p"},"useField")," or ",Object(i.b)("inlineCode",{parentName:"p"},"connectField")," provide you with the props."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import { filterDOMProps } from 'uniforms';\n\nconst filteredProps = filterDOMProps(props);\n")),Object(i.b)("h3",{id:"custom-props"},"Custom props"),Object(i.b)("p",null,"It's often the case that your custom components will have a bunch of known properties, like ",Object(i.b)("inlineCode",{parentName:"p"},"locale")," or ",Object(i.b)("inlineCode",{parentName:"p"},"userType"),". To ease the process of using them across the project, you can register them to make ",Object(i.b)("inlineCode",{parentName:"p"},"filterDOMProps")," remove them as well. For example, ",Object(i.b)("a",{parentName:"p",href:"https://github.com/vazco/uniforms/blob/master/packages/uniforms-bridge-simple-schema/src/register.ts"},Object(i.b)("inlineCode",{parentName:"a"},"SimpleSchemaBridge"))," registers all of the SimpleSchema-specific options."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import { filterDOMProps } from 'uniforms';\n\nfilterDOMProps({ example: 42 }); // { example: 42 }\nfilterDOMProps.registered.includes('example'); // false\nfilterDOMProps.register('example');\nfilterDOMProps.registered.includes('example'); // true\nfilterDOMProps({ example: 42 }); // {}\n")),Object(i.b)("p",null,"As ",Object(i.b)("inlineCode",{parentName:"p"},"filterDOMProps")," is fully typed, if you'd like to make it work with TypeScript, you have to extend the ",Object(i.b)("inlineCode",{parentName:"p"},"FilterDOMProps")," interface as well."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"declare module 'uniforms' {\n  interface FilterDOMProps {\n    propA: never;\n    propB: never;\n  }\n}\n\nfilterDOMProps.register('propA', 'propB');\n")),Object(i.b)("h2",{id:"joinname"},Object(i.b)("inlineCode",{parentName:"h2"},"joinName")),Object(i.b)("p",null,"Safely joins partial field names. When the first param is null, returns an array of strings. Otherwise, returns a string. If you create a custom field with subfields, then it's better to use this helper than manually concatenating them."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import { joinName } from 'uniforms';\n\njoinName(null, 'a', 'b.c', 'd'); // ['a', 'b', 'c', 'd']\njoinName('a', 'b.c', 'd'); // 'a.b.c.d'\n")),Object(i.b)("h2",{id:"randomids"},Object(i.b)("inlineCode",{parentName:"h2"},"randomIds")),Object(i.b)("p",null,"Generates random ID, based on given prefix. Use it, if you want to have random but deterministic strings. If no prefix is provided, a unique 'uniforms-X' prefix will be used generated."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import { randomIds } from 'uniforms';\n\nconst randomId1 = randomIds();\nrandomId1(); // uniforms-0000-0000\nrandomId1(); // uniforms-0000-0001\nrandomId1(); // uniforms-0000-0002\n\nconst randomId2 = randomIds();\nrandomId2(); // uniforms-0001-0000\nrandomId2(); // uniforms-0001-0001\nrandomId2(); // uniforms-0001-0002\n\nconst randomId3 = randomIds('prefix');\nrandomId3(); // prefix-0000\nrandomId3(); // prefix-0001\nrandomId3(); // prefix-0002\n")),Object(i.b)("h2",{id:"usefield"},Object(i.b)("inlineCode",{parentName:"h2"},"useField")),Object(i.b)("p",null,"A hook version of ",Object(i.b)("a",{parentName:"p",href:"#connectfield"},Object(i.b)("inlineCode",{parentName:"a"},"connectField")),". It receives three arguments: field name (string), field props (object), and optional options."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"function Example(props) {\n  const [fieldProps, context] = useField(props.name, props, options);\n  return <input {...filterDOMProps(fieldProps)} />;\n}\n")),Object(i.b)("p",null,"The table below lists all available options:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"center"},"Name"),Object(i.b)("th",{parentName:"tr",align:"center"},"Type"),Object(i.b)("th",{parentName:"tr",align:"center"},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"absoluteName")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:"center"},"If ",Object(i.b)("inlineCode",{parentName:"td"},"true"),", ignores the name from context.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"initialValue")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:"center"},"Initial value check. If ",Object(i.b)("inlineCode",{parentName:"td"},"true"),", then after the first render the default value is set as value if no value is provided (",Object(i.b)("inlineCode",{parentName:"td"},"undefined"),").")))))}o.isMDXComponent=!0}}]);